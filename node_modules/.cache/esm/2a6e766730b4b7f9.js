let express,registerController,loginController,userController,refreshController,ProductController,auth,admin;_30b‍.x([["default",()=>_30b‍.o]]);_30b‍.w("express",[["default",["express"],function(v){express=v}]]);_30b‍.w("../controllers",[["registerController",["registerController"],function(v){registerController=v}],["loginController",["loginController"],function(v){loginController=v}],["userController",["userController"],function(v){userController=v}],["refreshController",["refreshController"],function(v){refreshController=v}],["ProductController",["ProductController"],function(v){ProductController=v}]]);_30b‍.w("../middlewares/auth",[["default",["auth"],function(v){auth=v}]]);_30b‍.w("../middlewares/admin",[["default",["admin"],function(v){admin=v}]]);




const router = express.Router();

router.post('/register', registerController.register);
router.post('/login', loginController.login);
router.get('/me', auth, userController.me);
router.post('/refresh', refreshController.resfresh);
router.post('/logout', auth , loginController.logout);
router.post('/products', [auth, admin], ProductController.store);
router.put('/products/:id', [auth, admin], ProductController.update);
router.delete('/products/:id', [auth, admin], ProductController.delete);
router.get('/products', ProductController.getAll);
router.get('/products/:id', ProductController.getSingleproduct);

_30b‍.d(router);